# Add logs
access_log /var/log/nginx/nginx.access.log;
error_log /var/log/nginx/nginx.error.log;

# gzip Settings
gzip_static on;
gzip on;
gzip_disable "msie6";
gzip_vary on;
gzip_proxied any;
gzip_comp_level 6;
gzip_buffers 16 8k;
gzip_http_version 1.1;
gzip_types text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss text/javascript;

# Limit concurrency anti DoS
limit_req_zone $binary_remote_addr zone=req_limit:10m rate=200r/s;

server {
    listen 80;
    server_name ${GLOBAL_HOST_NAME} www.${GLOBAL_HOST_NAME};

    server_tokens off; # To hide nginx version

    # For certbot to validate address
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

upstream php-handler {
    server 172.25.0.6:9000;
    #server unix:/var/run/php/php7.4-fpm.sock;
}
# Set the `immutable` cache control options only for assets with a cache busting `v` argument
map $arg_v $asset_immutable {
    "" "";
    default "immutable";
}

server {
    listen 443 ssl http2;
    server_name ${GLOBAL_HOST_NAME} www.${GLOBAL_HOST_NAME};

    server_tokens off;

    ssl_certificate /etc/letsencrypt/live/nextcloud.colmeio.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/nextcloud.colmeio.com/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    
    root /var/www/html;

    # HTTP response headers borrowed from Nextcloud `.htaccess`
    add_header Referrer-Policy                   "no-referrer"       always;
    add_header X-Content-Type-Options            "nosniff"           always;
    add_header X-Download-Options                "noopen"            always;
    add_header X-Frame-Options                   "SAMEORIGIN"        always;
    add_header X-Permitted-Cross-Domain-Policies "none"              always;
    add_header X-Robots-Tag                      "noindex, nofollow" always;
    add_header X-XSS-Protection                  "1; mode=block"     always;
    add_header Strict-Transport-Security "max-age=15552000; includeSubDomains" always;
    
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";

    # The settings allows you to optimize the HTTP2 bandwitdth.
    # See https://blog.cloudflare.com/delivering-http-2-upload-speed-improvements/
    # for tunning hints
    client_body_buffer_size 512k;
    # set max upload size and increase upload timeout:
    client_max_body_size 512M;
    client_body_timeout 300s;
    fastcgi_buffers 64 4K;

    # Enable gzip but do not remove ETag headers
    gzip on;
    gzip_vary on;
    gzip_comp_level 4;
    gzip_min_length 256;
    gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
    gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/wasm application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;

    # Specify how to handle directories -- specifying `/index.php$request_uri`
    # here as the fallback means that Nginx always exhibits the desired behaviour
    # when a client requests a path that corresponds to a directory that exists
    # on the server. In particular, if that directory contains an index.php file,
    # that file is correctly served; if it doesn't, then the request is passed to
    # the front-end controller. This consistent behaviour means that we don't need
    # to specify custom rules for certain paths (e.g. images and other assets,
    # `/updater`, `/ocm-provider`, `/ocs-provider`), and thus
    # `try_files $uri $uri/ /index.php$request_uri`
    # always provides the desired behaviour.
    index index.php index.html /index.php$request_uri;

    # Rules borrowed from `.htaccess` to hide certain paths from clients
    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/)  { return 404; }
    location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console)                { return 404; }

    location = /robots.txt {
      allow all;
      log_not_found off;
      access_log off;
    }

    # Ensure this block, which passes PHP files to the PHP process, is above the blocks
    # which handle static assets (as seen below). If this block is not declared first,
    # then Nginx will encounter an infinite rewriting loop when it prepends `/index.php`
    # to the URI, resulting in a HTTP 500 error response.
    location ~ \.php(?:$|/) {
        # Required for legacy support
        rewrite ^/(?!index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+|.+\/richdocumentscode\/proxy) /index.php$request_uri;

        fastcgi_split_path_info ^(.+?\.php)(/.*)$;
        set $path_info $fastcgi_path_info;

        try_files $fastcgi_script_name =404;

        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $path_info;
        fastcgi_param HTTPS on;

        fastcgi_param modHeadersAvailable true;         # Avoid sending the security headers twice
        fastcgi_param front_controller_active true;     # Enable pretty urls
        fastcgi_pass php-handler;

        fastcgi_intercept_errors on;
        fastcgi_request_buffering off;

        fastcgi_max_temp_file_size 0;

        # Erase all headers
        fastcgi_param HTTP_HOST ${GLOBAL_HOST_NAME};
        fastcgi_param HTTP_X_FORWARDED_FOR $proxy_add_x_forwarded_for;
        fastcgi_param HTTP_X_FORWARDED_HOST ${GLOBAL_HOST_NAME};
        fastcgi_param REMOTE_ADDR $remote_addr;

#    fastcgi_param HTTP_HOST ${GLOBAL_HOST_NAME};
#    fastcgi_param HTTP_USER_AGENT "";
#    fastcgi_param HTTP_ACCEPT "";
#    fastcgi_param HTTP_ACCEPT_LANGUAGE "";
#    fastcgi_param HTTP_ACCEPT_ENCODING "";
#    fastcgi_param HTTP_COOKIE "";
#    fastcgi_param HTTP_CONNECTION "";
#    fastcgi_param HTTP_UPGRADE_INSECURE_REQUESTS "";
#    fastcgi_param HTTP_CACHE_CONTROL "";
#    fastcgi_param HTTP_PRAGMA "";
#    fastcgi_param REMOTE_ADDR ${GLOBAL_HOST_NAME};
#    fastcgi_param REMOTE_PORT "";
#    fastcgi_param SERVER_ADDR "";
#    fastcgi_param SERVER_PORT "";
#    fastcgi_param SERVER_NAME "";
    }

    location ~ \.(?:css|js|svg|gif|png|jpg|ico|wasm|tflite|map)$ {
        try_files $uri /index.php$request_uri;
        add_header Cache-Control "public, max-age=15778463, $asset_immutable";
        access_log off;     # Optional: Don't log access to assets

        location ~ \.wasm$ {
            default_type application/wasm;
        }
    }

    location ~ \.woff2?$ {
        try_files $uri /index.php$request_uri;
        expires 7d;         # Cache-Control policy borrowed from `.htaccess`
        access_log off;     # Optional: Don't log access to assets
    }

    # Rule borrowed from `.htaccess`
    location /remote {
        return 301 /remote.php$request_uri;
    }

    location / {
#        proxy_set_header Host $host;
#        proxy_set_header X-Real-IP $remote_addr;
#        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#        proxy_set_header X-Forwarded-Proto $scheme;
#        proxy_set_header X-Forwarded-Host $host;

        try_files $uri $uri/ /index.php$request_uri;
    }

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    # Nextcloud warning fix
    location ~ \.mjs$ {
        types {
            application/javascript mjs;
        }
    }
    location ^~ /.well-known {
        # The following 6 rules are borrowed from `.htaccess`
        location = /.well-known/carddav     { return 301 /remote.php/dav/; }
        location = /.well-known/caldav      { return 301 /remote.php/dav/; }
        location = /.well-known/webfinger   { return 301 $scheme://$host:$server_port/index.php/.well-known/webfinger; }
        location = /.well-known/nodeinfo    { return 301 $scheme://$host:$server_port/index.php/.well-known/nodeinfo; }
        location = /.well-known/host-meta   { return 301 /public.php?service=host-meta; }
        location = /.well-known/host-meta.json { return 301 /public.php?service=host-meta-json; }
        try_files $uri $uri/ =404;
    }
}